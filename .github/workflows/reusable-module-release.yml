name: Reusable module release

on:
  workflow_call:
    inputs:
      git_email:
        description: 'Git config email'
        type: string
        required: true
      git_name:
        description: 'Git config name'
        type: string
        required: true
      module_name:
        description: 'Name of the module'
        type: string
        required: true
      module_repository:
        description: 'Repository of the module'
        type: string
        required: true
      module_directory:
        description: 'Location of the module in Grimoirelab'
        type: string
        required: true
    secrets:
      access_token:
        description: 'Token for updating repositories'
        required: true

    outputs:
      package_version:
        description: "Package version formatted for Poetry"
        value: ${{ jobs.release.outputs.package_version }}
      version:
        description: "Version number for the package"
        value: ${{ jobs.release.outputs.version }}
      notes:
        description: "Notes content for the package"
        value: ${{ jobs.release.outputs.notes }}

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      package_version: ${{ steps.version.outputs.package_version }}
      notes: ${{ steps.notes.outputs.notes }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Set up Git config
        run: |
          git config --global user.email "${{ inputs.git_email }}"
          git config --global user.name "${{ inputs.git_name }}"

      - name: Configure repository credentials
        run: |
          git submodule set-url ${{ inputs.module_directory }} https://${{ secrets.access_token }}@github.com/${{ inputs.module_repository }}.git

      - name: Checkout submodule ${{ inputs.module_directory }}
        run: git submodule update --init --remote ${{ inputs.module_directory }}

      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "PATH=$HOME/.poetry/bin:$PATH" >> $GITHUB_ENV
        shell: bash

      - name: Install release-tools
        run: pip install release-tools

      - id: semverup
        name: Update version number
        continue-on-error: true
        run: semverup
        working-directory: ${{ inputs.module_directory }}

      - id: version
        name: Get current version
        run: |
          version=$(poetry version -s)
          package_version="${{ inputs.module_name }}@^$version"
          echo "::set-output name=package_version::$package_version"
          echo "::set-output name=version::$version"
          echo $package_version
        working-directory: ${{ inputs.module_directory }}

      - id: notes
        name: Generate release notes.
        if: steps.semverup.outcome == 'success'
        run: |
          version=${{ steps.version.outputs.version }}
          notes "${{ inputs.module_name }}" $version --news --authors
          version_notes="$(cat releases/$version.md)"
          version_notes="${version_notes//$'\n'/'%0A'}"
          echo "::set-output name=notes::$version_notes"
        working-directory: ${{ inputs.module_directory }}

#      - id: current_time
#        name: Store current time to get the release workflow
#        if: steps.semverup.outcome == 'success'
#        run: |
#          datetime=$(date +"%Y-%m-%dT%H:%M:%S%z")
#          echo "::set-output name=datetime::$datetime"
#          echo $datetime

      - id: publish
        name: Publish new version.
        if: steps.semverup.outcome == 'success'
        #TODO: Add --push origin
        run: |
          publish ${{ steps.version.outputs.version }} "${{ inputs.git_name }} <${{ inputs.git_email }}>"
        working-directory: ${{ inputs.module_directory }}

#      - id: wait-for-release
#        name: Wait for release to finish.
#        if: steps.publish.outcome == 'success'
#        run: |
#          url="https://api.github.com/repos/${{ inputs.module_repository }}/actions/workflows/release.yml/runs?created=>${{ steps.current_time.outputs.datetime }}"
#          while true
#          do
#            workflows=$(curl -sS -H "Authorization: token ${{ secrets.access_token }}" $url)
#            if [ $(echo $workflows | jq '.total_count') -eq 0 ]
#            then
#              echo "Release workflow did not start"
#              sleep 60
#              continue
#            fi
#
#            release_conclusion=$(echo $workflows | jq '.workflow_runs[0].conclusion')
#            release_status=$(echo $workflows | jq '.workflow_runs[0].status')
#            if [ $release_status = \"completed\" -a $release_conclusion = \"success\" ]
#            then
#              echo "Release completed!";
#              break;
#            elif [ $release_status = \"completed\" -a $release_conclusion != \"success\" ]
#            then
#              echo "Release failed!";
#              exit 1;
#            else
#              echo $release_conclusion $release_status
#              echo "Waiting for release..."
#              sleep 60
#            fi
#          done
